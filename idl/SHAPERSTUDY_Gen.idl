// Copyright (C) 2007-2019  CEA/DEN, EDF R&D, OPEN CASCADE
//
// Copyright (C) 2003-2007  OPEN CASCADE, EADS/CCR, LIP6, CEA/DEN,
// CEDRAT, EDF R&D, LEG, PRINCIPIA R&D, BUREAU VERITAS
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
// See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//

#ifndef __SHAPERSTUDY_GEN__
#define __SHAPERSTUDY_GEN__

#include "GEOM_Gen.idl"
#include "SALOMEDS.idl"
#include "SALOME_Exception.idl"

module SHAPERSTUDY_ORB
{

interface SHAPER_Object : GEOM::GEOM_Object
{
  /*!
  *  \brief Puts the shape to the object by BRep stream.
  */
  void SetShapeByStream(in string theStream);
  /*!
  *  \brief Sets the internal entry of the object, common for all objects in SHAPER-STUDY
  */
  void SetEntry( in string theInternalEntry );
  /*!
  *  \brief Sets SObject of this object (when it is published)
  */
  void SetSO( in SALOMEDS::SObject theInternalEntry );
  /*!
  *  \brief Returns SObject of this object
  */
  SALOMEDS::SObject GetSO();
  /*!
  *  \brief Returns true if shape is already dead
  */
  boolean IsDead();
  /*!
  *  \brief Makes the dead-copy of the shape and returns it
  */
  SHAPER_Object MakeDead();
  /*!
  *  \brief Returns the stream of the previous version of the shape stored here
  */
  SALOMEDS::TMPFile GetOldShapeStream();
  /*!
  *  \brief Sets internal type of operation created this object. For group it is 37, shape 1.
  */
  void SetType( in long theType );

  /*!
  *  \brief Sets the shape by the pointer to the TopoDS_Shape
  */
  void SetShapeByPointer(in long long theShape);
};

/*!
 * A group extension of the SHAPER object:
 * it contains the selection-type and selected sub-shapes indices.
 */
interface SHAPER_Group : SHAPER_Object
{
  /*!
  *  \brief Sets what is returned in the GEOM_IGroupOperations::GetType
  */
  void SetSelectionType(in long theType);
  /*!
  *  \brief Returns the type of the selected sub-shapes
  */
  long GetSelectionType();
  /*!
  *  \brief Sets what is returned in the GEOM_IGroupOperations::GetObjects
  */
  void SetSelection(in GEOM::ListOfLong theSelection);
  /*!
  *  \brief Returns the selected sub-shapes indices
  */
  GEOM::ListOfLong GetSelection();
};

interface Gen : GEOM::GEOM_Gen
{
  /*!
   *  \brief Searches existing or creates a new SHAPERSTUDY_Object to interact with SHAPER
   */
  SHAPER_Object FindOrCreateShape(in string theInternalEntry);
};

interface IShapesOperations : GEOM::GEOM_IShapesOperations
{
};

interface IGroupOperations  : GEOM::GEOM_IGroupOperations
{
  /*!
  *  \brief Searches existing group of theOwner shape by the entry. Returns NULL if can not find.
  */
  SHAPER_Group FindGroup(in SHAPER_Object theOwner, in string theEntry);
};

interface IFieldOperations  : GEOM::GEOM_IFieldOperations
{
};

interface IMeasureOperations  : GEOM::GEOM_IMeasureOperations
{
};

interface Field             : GEOM::GEOM_Field
{
};

interface FieldStep         : GEOM::GEOM_FieldStep
{
};

interface DoubleFieldStep   : GEOM::GEOM_DoubleFieldStep
{
};

interface IntFieldStep      : GEOM::GEOM_IntFieldStep
{
};

interface BoolFieldStep     : GEOM::GEOM_BoolFieldStep
{
};

};

#endif
